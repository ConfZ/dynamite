#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use lib '.';
my @tools = qw/ultimate dynamo/; #ultimate aprove seahorn/;
use Parsers qw{parse find_benchmarks};
my $usage = "usage: ./harvest (csvs|nocsvs) <benchdir> <tmpdir>\n";
die $usage unless $#ARGV >= 2;
my ($csvs,$bdir,$outdir) = @ARGV;

my @bnames = ();
#@bnames = @ARGV if $#ARGV > -1;
    
my ($benchdir,@benches,$b2desc) = Parsers::find_benchmarks($bdir,\@bnames);

################### Filename for results
use POSIX qw(strftime);
my $now = time();
my $fn = strftime('%Y%m%d%H%M%S', gmtime($now));

# dynamo-mannadiv-both-t.c.log     ultimate-cohencu4-both-t.c.log

# /home/ejk/dynamo/benchmarks/svcomp-nla-digbench/out-C4SElYT/ultimate-bresenham-both-t.c-both-t.c.log

my @integrated;
my @dynDetail;
my @skips;
################### Harvesting the results
print "% Tool   Benchmark                     Time    Result\n";
print "% ============================================\n";
my @newfile;
my $compare;
foreach my $tool (@tools) {
  foreach my $b (sort @benches) {
      mkdir("../results/$b") if (not (-e "../results/$b"));
      my $logfn = "$benchdir/$outdir/$tool-$b.log";
      warn $logfn;
      if (not (-e $logfn)) { push @skips, $logfn; next; }
      my $tmpb = $b; $tmpb =~ s/-both-n?t.c//;
      $compare->{$tmpb}->{$tool} = Parsers::parse($tool,$logfn);
      my $tm = $compare->{$tmpb}->{$tool}->{time};
      if ($outdir =~ /integrated/) {
          my $expectedTNT = '???';
          $expectedTNT = 'T' if $benchdir =~ /-term/;
          $expectedTNT = 'NT' if $benchdir =~ /-nonterm/;
          my ($d,$dstr) = Parsers::dynDetailTNT($tmpb,$logfn,
                                                ($tm >= 900 ? 1 : 0),
                                                $tm, $compare->{$tmpb}->{$tool}->{result},
                                                $expectedTNT);
          push @integrated, $dstr;
      } elsif ($tool eq 'dynamo') {
          #die "can't get time at all: $b and $b2res{$tmpb}->{time}\n" unless $b2res{$b}->{time} > 0;
          my ($d,$dstr) = Parsers::dynDetail($tmpb,$logfn,
                                              ($tm >= 900 ? 1 : 0),
                                             $tm, $compare->{$tmpb}->{$tool}->{result},
                                             ($benchdir =~ /nonterm/ ? 1 : 0));
          push @dynDetail, $dstr;
          $compare->{$tmpb}->{dynamo}->{rf} = "";
          $compare->{$tmpb}->{dynamo}->{rf} .= $d->{rf};
      $compare->{$tmpb}->{dynamo}->{$_} = $d->{$_} for qw/guesst guessr validt validr/;
      }


      if ($csvs eq 'csvs') {
          my $ln = sprintf("%s,%s,%.2f\n", $b, $compare->{$tmpb}->{$tool}->{result},  $compare->{$tmpb}->{$tool}->{time});
          open CHANH, ">../results/$b/$tool.$fn.csv" or die $!;
          print CHANH $ln;
          close CHANH;
      }
      push @newfile, "../results/$b/$tool.$fn.csv";
  }
}
print "Skipped These:\n   ".join("\n   ",@skips)."\n";
print "\n";
print "========= DYN DETAIL ============\n";
print for @dynDetail;

if($benchdir =~ /termination-crafted-lit/) {
    print "========= COMPARISON ============\n";
    my $prev = ''; my $ctr = 2;
    foreach my $b (sort keys %{$compare}) {
        my $trunc = substr($b,0,15);
        if ($trunc eq $prev) { $trunc .= "".($ctr++); } else { $prev = $trunc; $ctr = 2; };
        printf("%-25s \& \$ %-15s \$ \& %-4s \& %-6s \& %-4s \& %-6s \& %5s \&   \\ULTIMATE{  %-5s \& %-6s } \\\\\n",
               $trunc,
               $compare->{$b}->{dynamo}->{rf}." ",
               $compare->{$b}->{dynamo}->{guesst},
               $compare->{$b}->{dynamo}->{guessr},
               $compare->{$b}->{dynamo}->{validt},
               $compare->{$b}->{dynamo}->{validr},
               $compare->{$b}->{dynamo}->{time},
               $compare->{$b}->{ultimate}->{time},
               '\r'.$compare->{$b}->{ultimate}->{result}
            );
    }
}

if($outdir =~ /integrated/) {
    print "========= INTEGRATED ============\n";
    print for @integrated;
}
print "You may now wish to:\n  git add ".(join(" ",@newfile))."\n  git commit -m \"results $fn\"\n" if $csvs eq 'csvs';
