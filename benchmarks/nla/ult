#!/usr/bin/perl

use strict;
use File::Temp qw/ tempfile tempdir /;

my $ULTDIR = qq{/tools/ultimate/releaseScripts/default/UAutomizer-linux};
my $SPECFILE = qq{/tools/termination.prp};

my $arg1 = shift(@ARGV); # list or run or harvest

sub runc { my ($cmd) = @_; print "+ $cmd\n"; my $r = qx{$cmd}; print $r; }

sub parse_ult {
  my ($logfn) = @_;
  open(F,"$logfn") or warn "file $logfn - $!";
  my ($time,$result) = ('UNKNOWN','UNKNOWN');
  while (<F>) {
    if (/RESULT: Ultimate proved your program to be correct/) {
      $result = 'TRUE';
    }
    if (/RESULT: Ultimate proved your program to be incorrect/) {
      $result = 'FALSE';
    }
    if (/OverallTime: (\d+\.\d+)s,/) {
      $time = $1;
    }
    if (/out of memory/) {
      $result = 'MEMOUT';
    }
    if (/Cannot allocate memory/) {
      $result = 'MEMOUT';
    }
    if (/BÃ¼chiAutomizer plugin needed (\d+\.\d+)s/) {
        $time = $1;
    }
  }
  close F;
  return { time => $time, result => $result };
}

use File::Basename;
my $scriptfn = Cwd::abs_path($0);
my $benchdir = dirname($scriptfn);

my @benches;
print "Directory: $benchdir\n";

print "Benchmarks: ";
opendir(my $dh, $benchdir) || die "Can't open $benchdir: $!";
while (readdir $dh) {
  my $fn = $_;
  next unless $fn =~ m/^.*-ult\.c/;
  print "$benchdir/$fn  ";
  push @benches, "$fn";
}
closedir $dh;
print "\n";

exit if ($arg1 eq 'list');

chdir $benchdir;

################### Running the benchmarks
if ($arg1 eq 'run') {
    my $t = File::Temp->newdir( "out-XXXXXXX", CLEANUP => 0 );
    my $outdir = $t->dirname;
    print "Saving Ultimate logs to: $benchdir/$outdir\n";
    my %b2res;
    foreach my $b (@benches) {
        print "---\nNow running on: $b\n";
        chdir $ULTDIR or die "can't CHDIR to $ULTDIR: $!";
        runc(qq{./Ultimate.py --file $benchdir/$b  --spec $SPECFILE --architecture 32bit});
        my $logfn = "$benchdir/$outdir/$b.log";
        runc(qq{cp Ultimate.log $logfn});
        $b2res{$b} = parse_ult($logfn);
        print "$logfn - Time:$b2res{$b}->{time} - Result:$b2res{$b}->{result}\n";
    }
    print "you may now harvest the results:\n ./ult harvest $benchdir/$outdir\n";
}

################### Harvesting the results
if ($arg1 eq 'harvest') {
    my %b2res;
    my $outdir = shift @ARGV or die "usage: ./ult harvest <tmpdir>\n";
    foreach my $b (@benches) {
        my $logfn = "$benchdir/$outdir/$b.log";
        $b2res{$b} = parse_ult($logfn);
        printf "%-20s & %-5.2f & %-10s\n", $b, $b2res{$b}->{time}, $b2res{$b}->{result};
    }
}
