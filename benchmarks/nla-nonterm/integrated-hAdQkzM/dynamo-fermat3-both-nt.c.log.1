__main__:102:INFO (<module>) - Dynamite's logger_level: DEBUG
__main__:103:INFO (<module>) - Dig's logger_level: WARNING
__main__:104:INFO (<module>) - Timeout: 400s
__main__:106:INFO (<module>) - 2020-05-14 15:38:05.235132: dynamo.py --timeout=400 /home/exp/eric/dynamo/benchmarks/nla-nonterm/fermat3-both-nt.c
/home/exp/tools/SageMath/local/lib/python3.7/site-packages/pyximport/pyximport.py:51: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
  import imp
analysis:72:DEBUG (__init__) - Create C source for mainQ: /var/tmp/Dig_spne8e8i
analysis:80:DEBUG (__init__) - trans_cmd: /home/exp/eric/dynamo/deps/dynamo-instr/src/cil/bin/cilly --save-temps -D HAPPY_MOOD --dotransform /home/exp/eric/dynamo/benchmarks/nla-nonterm/fermat3-both-nt.c --out=/var/tmp/Dig_spne8e8i/fermat3-both-nt.c --bnd=500
analysis:87:DEBUG (__init__) - cg: defaultdict(<class 'list'>, {'vloop_38': ['exit'], 'vloop_46': ['exit'], 'vloop_33': ['exit', 'vloop_38', 'vloop_46'], 'mainQ': ['vloop_33'], 'main': ['mainQ']})
analysis:98:DEBUG (__init__) - postorder_vloop_ids: ['vloop_38', 'vloop_46', 'vloop_33']
analysis:107:DEBUG (__init__) - inp_decls (<class 'data.prog.Symbs'>): I A, I R, I kk, I k
analysis:108:DEBUG (__init__) - inv_decls (<class 'data.prog.DSymbs'>): {'vtrace1_33': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='cc', typ='I'), Symb(name='kk', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace2_33': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='cc', typ='I'), Symb(name='kk', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace3_33': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='cc', typ='I'), Symb(name='kk', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace1_46': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I')), 'vtrace2_46': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I')), 'vtrace3_46': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I')), 'vtrace1_38': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace2_38': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace3_38': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I'))}
__main__:152:DEBUG (<module>) - prove_process: 24180
lib:38:DEBUG (gen_rand_inps) - inps (0): Inps()
lib:38:DEBUG (gen_rand_inps) - inps (93): Inps({Inp(ss=('A', 'R', 'kk', 'k'), vs=(279, 16, -4, 275)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(293, -15, 298, -15)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(291, -13, 7, 2)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(287, 2, 4, -11)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(275, 6, -13, -274)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(277, 2, -1, 295)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(291, 12, -12, 1)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(29, 3, 7, -12)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(285, 3, -294, -18)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(293, -4, 5, -5)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(9, 2, 283, 29)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(23, -3, -6, -8)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(273, -3, 3, -271)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(289, -11, 14, -27)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(21, 1, 26, 271)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(285, 2, -9, 6)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(287, 7, -22, 3)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(11, 0, 8, 18)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(283, 6, 16, -271)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(279, -6, 18, 291)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(293, 4, -3, -26)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(283, -9, 291, 295)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(283, 14, -5, 279)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(277, 0, 14, 26)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(27, -3, -276, -26)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(297, -9, 285, 2)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(275, 4, 6, -278)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(289, -7, -5, 14)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(283, -5, 6, -14)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(285, 1, 272, -9)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(299, -15, -12, -26)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(281, -1, 6, -283)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(11, 3, -279, -14)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(5, 0, 1, -9)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(299, 11, -3, -300)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(277, -3, -283, 289)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(299, -14, -278, -5)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(21, 0, -1, -20)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(25, -3, 281, 296)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(287, -9, -7, -19)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(273, -5, 296, -272)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(281, -9, 27, -10)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(293, 7, 287, 280)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(3, 0, 8, 28)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(299, -14, -13, 12)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(273, -8, 29, -291)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(271, -7, 3, 2)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(289, 2, -280, 3)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(297, -4, -300, -3)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(7, 3, 10, -295)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(273, 10, 17, 14)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(273, 12, 282, -11)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(27, 1, 26, 21)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(287, -9, -292, -271)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(283, 9, -11, 22)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(285, 3, -294, 3)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(273, -13, -29, 288)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(275, -5, 3, 16)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(15, -1, -289, -19)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(277, -15, -9, 15)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(275, 1, 270, -3)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(277, 9, -10, 4)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(21, 1, 24, -21)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(29, -4, -8, -5)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(17, 3, -271, -14)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(23, 4, -290, 16)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(279, 3, 277, -284)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(3, 2, -21, 23)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(9, 0, 3, -291)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(3, 1, 270, 277)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(277, -12, 14, -19)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(275, -5, -22, -275)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(9, 1, 13, -19)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(283, 1, -13, -5)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(29, 2, 275, -21)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(289, 3, 5, -11)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(291, 5, 278, 0)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(13, 0, 13, -9)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(5, 2, -2, 297)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(1, 1, -297, -287)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(293, 0, 10, -5)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(277, 7, -24, -11)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(285, -9, 14, -7)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(279, 0, -291, -9)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(3, 0, 8, -8)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(273, -8, 279, 297)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(27, 5, 294, 292)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(11, 3, -9, 3)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(271, -8, -285, 6)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(9, 3, -5, 287)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(289, 0, -3, -20)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(289, -12, 6, 296)), Inp(ss=('A', 'R', 'kk', 'k'), vs=(25, 5, 3, 286))})
lib:43:DEBUG (gen_rand_inps) - gen 186/100 random inps
utils.profiling:31:DEBUG (timed) - gen_rand_inps: 7673.12ms
lib:54:DEBUG (get_traces_from_inps) - inp_decls: I A, I R, I kk, I k
lib:55:DEBUG (get_traces_from_inps) - inv_decls: {'vtrace1_33': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='cc', typ='I'), Symb(name='kk', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace2_33': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='cc', typ='I'), Symb(name='kk', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace3_33': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='cc', typ='I'), Symb(name='kk', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace1_46': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I')), 'vtrace2_46': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I')), 'vtrace3_46': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I')), 'vtrace1_38': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace2_38': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace3_38': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I'))}
utils.profiling:31:DEBUG (timed) - _get_traces_mp: 590.15ms
utils.profiling:31:DEBUG (timed) - _merge_traces: 700.77ms
utils.profiling:31:DEBUG (timed) - get_traces_from_inps: 1307.25ms
analysis:1147:DEBUG (prove) - Analysing vloop_38
analysis:1149:DEBUG (prove) - base_term_inps: 0
analysis:1150:DEBUG (prove) - term_inps: 57
analysis:1151:DEBUG (prove) - mayloop_inps: 0
analysis:1171:DEBUG (prove) - Proving Termination: vloop_38
analysis:1040:DEBUG (prove_term_vloop) - classify_inps: vloop_38
analysis:1043:DEBUG (prove_term_vloop) - itraces: 57
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
lib:208:DEBUG (print_inps) - [('vtrace1_33', 1), ('vtrace2_33', 1), ('vtrace1_38', 1), ('vtrace2_38', 6), ('vtrace3_38', 1), ('vtrace1_46', 1), ('vtrace2_46', 500)]
analysis:1045:DEBUG (prove_term_vloop) - base_term_inps: 0
analysis:1046:DEBUG (prove_term_vloop) - term_inps: 57
analysis:1047:DEBUG (prove_term_vloop) - mayloop_inps: 0
analysis:857:DEBUG (infer_ranking_functions) - vloop: vloop_38
analysis:858:DEBUG (infer_ranking_functions) - term_itraces: 57
analysis:905:DEBUG (infer_ranking_functions) - train_rand_trans: 1140
analysis:912:DEBUG (_infer_ranking_functions_from_trans) - rnk_template (<class 'sage.symbolic.expression.Expression'>): A*uk_1 + u*uk_2 + r*uk_4 + c*uk_5 + k*uk_6 + uk_3*v + uk_0
analysis:913:DEBUG (_infer_ranking_functions_from_trans) - uks: [uk_0, uk_1, uk_2, uk_3, uk_4, uk_5, uk_6]
analysis:937:DEBUG (_infer_ranking_functions_from_trans) - train_term_rand_trans: 1140
analysis:944:DEBUG (_infer_ranking_functions_from_trans) - model: [uk_1 = 0,
 uk_6 = 1,
 uk_3 = 0,
 uk_5 = -1,
 uk_4 = 0,
 uk_2 = 0,
 uk_0 = 0]
analysis:948:DEBUG (_infer_ranking_functions_from_trans) - t1: uk_0 +
289*uk_1 +
-23*uk_2 +
5*uk_3 +
-149*uk_4 +
2*uk_5 +
5*uk_6
analysis:949:DEBUG (_infer_ranking_functions_from_trans) - t2: uk_0 +
289*uk_1 +
-23*uk_2 +
9*uk_3 +
-161*uk_4 +
4*uk_5 +
5*uk_6
analysis:950:DEBUG (_infer_ranking_functions_from_trans) - rf: -1*c + k
analysis:979:DEBUG (_infer_ranking_functions_from_trans) - train_term_rand_trans: 0
analysis:980:DEBUG (_infer_ranking_functions_from_trans) - ranking_function_list: [-1*c + k]
utils.profiling:31:DEBUG (timed) - infer_ranking_functions: 34152.61ms
analysis:1061:DEBUG (prove_term_vloop) - validate_ranking_functions: vloop_38
analysis:988:DEBUG (validate_ranking_functions) - ranks_str: -1*c + k
validate:120:DEBUG (gen_validate_file) - validate_cmd: /home/exp/eric/dynamo/deps/dynamo-instr/src/cil/bin/cilly --save-temps -D HAPPY_MOOD --dovalidate /home/exp/eric/dynamo/benchmarks/nla-nonterm/fermat3-both-nt.c --out=/var/tmp/Dig_spne8e8i/vloop_38/par/validate/fermat3-both-nt.c --pos=38 --ranks="-1*c + k"
validate:41:DEBUG (prove_reach) - pcmd: /home/exp/tools/CPAchecker-1.9-unix/scripts/cpa.sh -spec /home/exp/tools/reachability.prp -predicateAnalysis -setprop counterexample.export.compressWitness=false /var/tmp/Dig_spne8e8i/vloop_38/par/validate/fermat3-both-nt.c
validate:41:DEBUG (prove_reach) - pcmd: /home/exp/tools/ultimate/releaseScripts/default/UAutomizer-linux/Ultimate.py --spec /home/exp/tools/reachability.prp --architecture 32bit --witness-dir /var/tmp/Dig_spne8e8i/vloop_38/par/uatm --witness-name witness.graphml --file /var/tmp/Dig_spne8e8i/vloop_38/par/validate/fermat3-both-nt.c
validate:41:DEBUG (prove_reach) - pcmd: /home/exp/tools/ultimate/releaseScripts/default/UTaipan-linux/Ultimate.py --spec /home/exp/tools/reachability.prp --architecture 32bit --witness-dir /var/tmp/Dig_spne8e8i/vloop_38/par/utp --witness-name witness.graphml --file /var/tmp/Dig_spne8e8i/vloop_38/par/validate/fermat3-both-nt.c
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_ohofjcca/symexe/fermat1-both-nt_mainQ.c.mainQ_53.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_ohofjcca/symexe/fermat1-both-nt_mainQ.c.mainQ_54.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_ohofjcca/symexe/fermat1-both-nt_mainQ.c.mainQ_52.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_ohofjcca/symexe/fermat1-both-nt_mainQ.c.mainQ_51.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_ohofjcca/symexe/fermat1-both-nt_mainQ.c.mainQ_50.straces'
data.symstates:317:WARNING (compute) - cannot obtain symbolic states, unreachable locs?
analysis:194:DEBUG (_get_symstates_from_src) - Traceback (most recent call last):
  File "/home/exp/eric/dynamo/src/analysis.py", line 192, in _get_symstates_from_src
    symstates.compute(src.symexefile, src.mainQ_name, src.funname, src.symexedir)
  File "/home/exp/eric/dynamo/deps/dig/src/data/symstates.py", line 319, in compute
    sys.exit(0)
SystemExit: 0

analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace1_45
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 54
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace1_45
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 26456.22ms
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 35615.77ms
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 58388.16ms
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 82382.48ms
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 106527.67ms
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 118475.46ms
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 137472.36ms
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 149933.00ms
analysis:225:DEBUG (_get_stem_from_ss) - preloop_fst_symstate: loc: vtrace1_45
pc: And(1 == X_A%2,
    -1 >= (-1 + X_R)**2 + -1*X_A,
    -3 <= (1 + 2*X_R)**2 + -4*X_R**2 + -4*X_R)
slocal: And(A == X_A,
    u == 1 + 2*X_R,
    1 == v,
    r == X_R**2 + -1*X_A,
    0 == c,
    k == -5)
analysis:228:DEBUG (_get_stem_from_ss) - mainQ init_symvars: I X_A, I X_R, I X_k
analysis:231:DEBUG (_get_stem_from_ss) - stem_cond (<class 'z3.z3.BoolRef'>): And(1 == X_A%2,
    -1 >= (-1 + X_R)**2 + -1*X_A,
    -3 <= (1 + 2*X_R)**2 + -4*X_R**2 + -4*X_R)
analysis:232:DEBUG (_get_stem_from_ss) - stem_transrel (<class 'z3.z3.BoolRef'>): And(A == X_A,
    u == 1 + 2*X_R,
    1 == v,
    r == X_R**2 + -1*X_A,
    0 == c,
    k == -5)
analysis:269:DEBUG (_get_loop_from_symstates) - Create C source for vloop_45: /var/tmp/Dig_z02_8l49
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 59
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_45
utils.profiling:31:DEBUG (timed) - _get_symstates_from_src: 136216.65ms
analysis:280:DEBUG (_get_loop_from_symstates) - vloop inp_decls: I A, I u, I v, I r, I c, I k
analysis:281:DEBUG (_get_loop_from_symstates) - vloop inv_decls: {'vtrace1_32': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace2_32': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace3_32': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace1_45': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace2_45': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace3_45': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace1_37': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace2_37': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I')), 'vtrace3_37': (Symb(name='A', typ='I'), Symb(name='u', typ='I'), Symb(name='v', typ='I'), Symb(name='r', typ='I'), Symb(name='c', typ='I'), Symb(name='k', typ='I'))}
analysis:282:DEBUG (_get_loop_from_symstates) - vloop init_symvars: I X_A, I X_u, I X_v, I X_r, I X_c, I X_k
analysis:314:DEBUG (_get_loop_from_symstates) - inloop_fst_slocal: And(A0 == X_A,
    u0 == X_u,
    v0 == X_v,
    r0 == X_r,
    c0 == X_c,
    k0 == X_k)
analysis:315:DEBUG (_get_loop_from_symstates) - inloop_snd_slocal: And(A1 == X_A,
    u1 == 2 + X_u,
    v1 == X_v,
    r1 == X_r + X_u,
    c1 == 1 + X_c,
    k1 == X_k)
analysis:327:DEBUG (_get_loop_from_symstates) - loop_transrel: And(And(A0 == A,
        u0 == u,
        v0 == v,
        r0 == r,
        c0 == c,
        k0 == k),
    And(A1 == A,
        u1 == 2 + u,
        v1 == v,
        r1 == r + u,
        c1 == 1 + c,
        k1 == k))
analysis:329:DEBUG (_get_loop_from_symstates) - inloop_fst_symstate: pc: 0 <=
X_u**2 +
X_v**2 +
-4*X_A +
-1*X_c +
X_k +
-4*X_r +
2*X_u +
-2*X_v
analysis:330:DEBUG (_get_loop_from_symstates) - inloop_fst_symstate: slocal: And(A == X_A,
    u == X_u,
    v == X_v,
    r == X_r,
    c == X_c,
    k == X_k)
analysis:334:DEBUG (_get_loop_from_symstates) - loop_cond: 0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v
analysis:337:DEBUG (_get_loop_from_symstates) - terms: [0, u**2, v**2, -4*A, -1*c, k, -4*r, 2*u, -2*v]
analysis:338:DEBUG (_get_loop_from_symstates) - nonlinear_terms: [u**2, v**2]
utils.profiling:31:DEBUG (timed) - _get_loopinfo_from_symstates: 286273.61ms
analysis:399:DEBUG (get_loopinfo) - stem: <utils.loop.Stem object at 0x7f405c3991d0>
analysis:400:DEBUG (get_loopinfo) - loop: <utils.loop.Loop object at 0x7f405b3242e8>
utils.profiling:31:DEBUG (timed) - get_loopinfo: 286273.86ms
analysis:702:DEBUG (_stat_candidate_rcs) - stat (1 total): defaultdict(<class 'int'>, {0: 1})
analysis:729:DEBUG (prove_nonterm_vloop) - PROVE_NT DEPTH 0: ZConj({0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v})
analysis:505:DEBUG (verify) - loop_transrel: And(And(A0 == A,
        u0 == u,
        v0 == v,
        r0 == r,
        c0 == c,
        k0 == k),
    And(A1 == A,
        u1 == 2 + u,
        v1 == v,
        r1 == r + u,
        c1 == 1 + c,
        k1 == k))
analysis:506:DEBUG (verify) - loop_cond: 0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v
analysis:507:DEBUG (verify) - rcs: ZConj({0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v})
analysis:521:DEBUG (verify) - labeled_rcs: ZConj({0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v:c_0})
analysis:528:DEBUG (verify) - transrel_rcs: ZConj({And(And(A0 == A,
        u0 == u,
        v0 == v,
        r0 == r,
        c0 == c,
        k0 == k),
    And(A1 == A,
        u1 == 2 + u,
        v1 == v,
        r1 == r + u,
        c1 == 1 + c,
        k1 == k)), 0 <=
u0**2 + v0**2 + -4*A0 + -1*c0 + k0 + -4*r0 + 2*u0 + -2*v0:c_0})
analysis:533:DEBUG (verify) - init_transrel_rcs: ZConj({And(And(A0 == A,
        u0 == u,
        v0 == v,
        r0 == r,
        c0 == c,
        k0 == k),
    And(A1 == A,
        u1 == 2 + u,
        v1 == v,
        r1 == r + u,
        c1 == 1 + c,
        k1 == k)), 0 <=
u0**2 + v0**2 + -4*A0 + -1*c0 + k0 + -4*r0 + 2*u0 + -2*v0:c_0, And(1 == X_A%2,
    -1 >= (-1 + X_R)**2 + -1*X_A,
    -3 <= (1 + 2*X_R)**2 + -4*X_R**2 + -4*X_R), And(A == X_A,
    u == 1 + 2*X_R,
    1 == v,
    r == X_R**2 + -1*X_A,
    0 == c,
    k == -5)})
analysis:542:DEBUG (_check) - rc: 0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v:c_0
analysis:547:DEBUG (_check) - rc_r: 0 <=
u1**2 + v1**2 + -4*A1 + -1*c1 + k1 + -4*r1 + 2*u1 + -2*v1
analysis:548:DEBUG (_check) - f: ZConj({And(And(A0 == A,
        u0 == u,
        v0 == v,
        r0 == r,
        c0 == c,
        k0 == k),
    And(A1 == A,
        u1 == 2 + u,
        v1 == v,
        r1 == r + u,
        c1 == 1 + c,
        k1 == k)), Not(0 <=
    u1**2 +
    v1**2 +
    -4*A1 +
    -1*c1 +
    k1 +
    -4*r1 +
    2*u1 +
    -2*v1), 0 <=
u0**2 + v0**2 + -4*A0 + -1*c0 + k0 + -4*r0 + 2*u0 + -2*v0:c_0})
solver:201:DEBUG (_get_unsat_core) - testing soft constraint c_0: 0 <=
u0**2 + v0**2 + -4*A0 + -1*c0 + k0 + -4*r0 + 2*u0 + -2*v0
solver:207:DEBUG (_get_unsat_core) - sat: keeping c_0
solver:212:DEBUG (_get_unsat_core) - approx: [('c_0', 0 <=
u0**2 + v0**2 + -4*A0 + -1*c0 + k0 + -4*r0 + 2*u0 + -2*v0)]
analysis:556:DEBUG (_check) - rs: unsat
analysis:557:DEBUG (_check) - unsat_core: ['c_0']
analysis:600:INFO (verify) - dg: defaultdict(<class 'list'>, {'c_0': ['c_0']})
analysis:601:INFO (verify) - label_d: defaultdict(<class 'str'>, {0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v: 'c_0'})
analysis:602:INFO (verify) - rev_label_d: {'c_0': 0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v}
analysis:605:INFO (verify) - loop_cond_label: c_0
analysis:609:INFO (verify) - mds_labels: {'c_0'}
analysis:610:INFO (verify) - mds: ZConj({0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v})
utils.profiling:31:DEBUG (timed) - verify: 892.80ms
analysis:744:DEBUG (prove_nonterm_vloop) - new valid rcs: ZConj({0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v})
utils.profiling:31:DEBUG (timed) - prove_nonterm_vloop: 287596.15ms
analysis:764:INFO (print_valid_rcs) - rcs: ZConj({0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v})
analysis:765:INFO (print_valid_rcs) - (simplified) rcs: 0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v
utils.profiling:31:DEBUG (timed) - prove: 697097.98ms
TNT result: (False, ('vloop_45', [(ZConj({0 <= u**2 + v**2 + -4*A + -1*c + k + -4*r + 2*u + -2*v}), [])]))
Time log:
gen_rand_inps: 2.554s
_get_traces_mp: 1.385s
_merge_traces: 1.536s
get_traces_from_inps: 2.926s
infer_ranking_functions: 26.833s
prove_reach: 375.671s
validate_ranking_functions: 376.981s
prove_term_vloop: 403.872s
_get_symstates_from_src: 851.468s
_get_loopinfo_from_symstates: 286.274s
get_loopinfo: 286.274s
verify: 0.893s
prove_nonterm_vloop: 287.596s
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 389
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 394
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 399
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 404
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 409
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 414
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 419
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 424
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 429
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 434
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 439
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 444
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 449
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 454
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 459
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 464
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 469
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 474
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 479
184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 679
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 684
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 689
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 694
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_3_kqkrv8/symexe/dijkstra3-both-nt_vloop_33.c.vloop_33_652.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_3_kqkrv8/symexe/dijkstra3-both-nt_vloop_33.c.vloop_33_653.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_3_kqkrv8/symexe/dijkstra3-both-nt_vloop_33.c.vloop_33_654.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_3_kqkrv8/symexe/dijkstra3-both-nt_vloop_33.c.vloop_33_651.straces'
data.symstates:63:ERROR (parse) - Cannot obtain symstates from '/var/tmp/Dig_3_kqkrv8/symexe/dijkstra3-both-nt_vloop_33.c.vloop_33_650.straces'
data.symstates:317:WARNING (compute) - cannot obtain symbolic states, unreachable locs?
analysis:194:DEBUG (_get_symstates_from_src) - Traceback (most recent call last):
  File "/home/exp/eric/dynamo/src/analysis.py", line 192, in _get_symstates_from_src
    symstates.compute(src.symexefile, src.mainQ_name, src.funname, src.symexedir)
  File "/home/exp/eric/dynamo/deps/dig/src/data/symstates.py", line 319, in compute
    sys.exit(0)
SystemExit: 0

analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 654
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 659
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 664
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 669
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 674
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 679
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 684
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 689
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 694
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 699
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 704
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 709
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 714
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 719
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 724
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 729
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 734
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 739
analysis:197:DEBUG (_get_symstates_from_src) - target_loc: vtrace2_33
analysis:184:DEBUG (_get_symstates_from_src) - SymStatesC.maxdepth: 744

EJK TIMER: 400.000203

