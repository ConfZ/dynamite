#!/usr/bin/perl

use strict;
use warnings;
use File::Temp qw/ tempfile tempdir /;

my $SPECFILE = qq{/tools/termination.prp};
my $TIMOUT   = '5m';
#my $NT_SPECFILE = qq{/tools/nontermination.prp};

###############################################################
use lib '.';
use Parsers qw{ult};
my $CFG = {
    ultimate => {
        DIR    => qq{/tools/ultimate/releaseScripts/default/UAutomizer-linux},
        CMD    => sub { return qq(timeout $TIMOUT ./Ultimate.py --file $_[0]  --spec $SPECFILE --architecture 32bit); },
        FETCH  => sub { return qq(cp Ultimate.log $_[0]); },
        PARSE  => sub { return Parsers::ult($_[0]); },
    },
    aprove => {
        DIR    => qq{/tools/aprove},
        CMD    => sub { return qq(./AProVE.sh $_[0] > aprove.log); },
        FETCH  => sub { return qq(cp aprove.log $_[0]); },
        PARSE  => sub { return Parsers::aprove($_[0]); }
    },
    seahorn => {
        DIR    => qq{/tools/seahorn/build/run/bin},
        CMD    => sub { return qq(/tools/seahorn/build/run/bin/sea_svcomp --cpu=10 --cex=error-witness.graphml -m64 --spec=$SPECFILE $_[0] > /tmp/seahorn.log); },
        FETCH  => sub { return qq(mv /tmp/seahorn.log $_[0]); },
        PARSE  => sub { return Parsers::seahorn($_[0]); }
    }
};

###############################################################
#### Utilities
sub runc { my ($cmd) = @_; print "+ $cmd\n"; my $r = qx{$cmd}; print $r; }

###############################################################
#### Arguments parsing
die "usage: ./ult <subdir> (list|run) [ultimate,seahorn,aprove]\n" unless $#ARGV >= 1;
my $bdir = shift(@ARGV); # subdirectory to use like 'nla'
my $arg1 = shift(@ARGV); # list or run or harvest
my $ts   = shift(@ARGV);
my @tools = split ',', $ts;
print "--- Configuration ---\n";
print "| Tools: $ts\n";

use Parsers qw/find_benchmarks/;
my ($benchdir,@benches) = Parsers::find_benchmarks($bdir);
@benches = sort @benches[50..158];
print "| Total files: ".($#benches+1)."\n";
print "---------------\n";
exit if ($arg1 eq 'list');

chdir $benchdir;

################### Running the benchmarks
if ($arg1 eq 'run') {
    my $t = File::Temp->newdir( "out-XXXXXXX", CLEANUP => 0 );
    my $outdir = $t->dirname;
    print "| Saving logs to: $benchdir/$outdir\n";
    print "----------------\n\n";
    my $ct = 0;
    foreach my $tool (@tools) {
        my %b2res;
        foreach my $b (@benches) {
            print "---[ Now running on: $b ]---\n";
            chdir $CFG->{$tool}->{DIR} or die "can't CHDIR to $CFG->{$tool}->{DIR}: $!";
            #my $SPECFILE = ($b =~ m/-nt\./ ? $NT_SPECFILE : $T_SPECFILE);
            runc( $CFG->{$tool}->{CMD}->("$benchdir/$b") );
            my $logfn = "$benchdir/$outdir/$tool-$b.log";
            runc( $CFG->{$tool}->{FETCH}->($logfn) );
            $b2res{$b} = $CFG->{$tool}->{PARSE}->($logfn);
            print "$logfn - Time:$b2res{$b}->{time} - Result:$b2res{$b}->{result}\n";
	    ++$ct; 
        }
    }
    print "you may now harvest the results:\n ./harvest $bdir $outdir\n";
}

