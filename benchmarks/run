#!/usr/bin/perl

#use local::lib;
use strict;
use warnings;
use File::Temp qw/ tempfile tempdir /;
use Time::Out qw(timeout) ;

my $SPECFILE = qq{/tools/termination.prp};
my $TIMEOUT  = 300;
my @timedout;
my $NT_SPECFILE = qq{/tools/nontermination.prp};

my $hn = qx{hostname -A};
$SPECFILE = '/home/exp'.$SPECFILE if $hn =~ /cse-tnguyen-02/;
$NT_SPECFILE = '/home/exp'.$NT_SPECFILE if $hn =~ /cse-tnguyen-02/;
my $KILL = "killall java; killall z3;";

###############################################################
use lib '.';
use Parsers qw{ult dynamo};
use Time::HiRes qw(gettimeofday tv_interval);
my $t0;

my $CFG = {
    dynamo => {
        DIR => qq{/home/ejk/dynamo/src},
        CMD => sub { my $arg = ($SPECFILE =~ m/\/term/ ? '-t' : '-nt');
                     $t0 = [gettimeofday];
                     return qq($KILL python3 dynamo.py --timeout=$TIMEOUT $_[0] $arg 2>\&1 | tee /tmp/dynamo.ejk.txt);
        },
        FETCH => sub { my $elapsed = tv_interval($t0);
		       my $tm = "EJK TIMER: $elapsed\n";
		       open TM, ">>/tmp/dynamo.ejk.txt" or warn $!;
		       print TM "\n$tm\n";
		       close TM;
		       return qq(cp /tmp/dynamo.ejk.txt $_[0]); },
        PARSE => sub { return Parsers::dynamo($_[0]); },
    },
    ultimate => {
        DIR    => qq{/tools/ultimate/releaseScripts/default/UAutomizer-linux},
        CMD    => sub { return qq($KILL timeout ${TIMEOUT}s ./Ultimate.py --file $_[0]  --spec $SPECFILE --architecture 32bit); },
        FETCH  => sub { return qq(cp Ultimate.log $_[0]); },
        PARSE  => sub { return Parsers::ult($_[0]); },
    },
    aprove => {
        DIR    => qq{/tools/aprove},
        CMD    => sub { return qq(./AProVE.sh $_[0] > aprove.log); },
        FETCH  => sub { return qq(cp aprove.log $_[0]); },
        PARSE  => sub { return Parsers::aprove($_[0]); }
    },
    seahorn => {
        DIR    => qq{/tools/seahorn/build/run/bin},
        CMD    => sub { return qq(/tools/seahorn/build/run/bin/sea_svcomp --cpu=10 --cex=error-witness.graphml -m64 --spec=$SPECFILE $_[0] > /tmp/seahorn.log); },
        FETCH  => sub { return qq(mv /tmp/seahorn.log $_[0]); },
        PARSE  => sub { return Parsers::seahorn($_[0]); }
    }
};

$CFG->{dynamo}->{DIR} = '/home/exp/eric/dynamo/src' if $hn =~ /cse-tnguyen-02/;
$CFG->{ultimate}->{DIR} = '/home/exp'.$CFG->{ultimate}->{DIR} if $hn =~ /cse-tnguyen-02/;
    
###############################################################
#### Utilities
sub runc { my ($cmd) = @_; print "+ $cmd\n(with timeout of $TIMEOUT s)\n";
	   #timeout $TIMEOUT => sub { print qx{$cmd}; };
	   # if ($@) {  push @timedout, $cmd; }
	   print print qx{$cmd};
}	   

###############################################################
#### Arguments parsing
die "usage: ./run (options) <subdir> (list|run) [dynamo,ultimate,seahorn,aprove] (geo1-both-t,cohencu2-both-t,...)\n".
    "  (last argument is optional) \n".
    "  options:\n".
    "    --nt=1    # for non-termination".
    "    --timeout=900\n" unless $#ARGV >= 1;
while ($ARGV[0] =~ /^--(.*)=(.+)$/) {
    my ($k,$v) = ($1,$2);
    shift @ARGV;
    $TIMEOUT = $v if $k eq 'timeout';
    $SPECFILE = $NT_SPECFILE if $k eq 'nt';
}
my @bnames = ();
my ($bdir,$arg1,$ts,$bms) = @ARGV;
my @tools = split ',', $ts;
@bnames = split ',', $bms if defined $bms;
use Data::Dumper;
print Dumper(\@bnames);
print "--- Configuration ---\n";
print "| Tools: $ts\n";

use Parsers qw/find_benchmarks/;
my ($benchdir,@benches,$b2expected) = Parsers::find_benchmarks($bdir,\@bnames);
@benches = sort @benches; # [50..158];
print "| Total files: ".($#benches+1)."\n";
print "---------------\n";
exit if ($arg1 eq 'list');

chdir $benchdir;

################### Running the benchmarks
if ($arg1 eq 'run') {
    my $t = File::Temp->newdir( "out-XXXXXXX", CLEANUP => 0 );
    my $outdir = $t->dirname;
    print "| Saving logs to: $benchdir/$outdir\n";
    print "----------------\n\n";
    my $ct = 0;
    foreach my $tool (@tools) {
        my %b2res;
        foreach my $b (@benches) {
            print "---[ Now running on: $b ]---\n";
            chdir $CFG->{$tool}->{DIR} or die "can't CHDIR to $CFG->{$tool}->{DIR}: $!";
            #my $SPECFILE = ($b =~ m/-nt\./ ? $NT_SPECFILE : $T_SPECFILE);
            runc( $CFG->{$tool}->{CMD}->("$benchdir/$b") );
            my $logfn = "$benchdir/$outdir/$tool-$b.log";
            runc( $CFG->{$tool}->{FETCH}->($logfn) );
            $b2res{$b} = $CFG->{$tool}->{PARSE}->($logfn);
            print "$logfn - Time:$b2res{$b}->{time} - Result:$b2res{$b}->{result}\n";
	    ++$ct; 
        }
    }
    print "you may now harvest the results:\n ./harvest nocsvs $bdir $outdir\n";
    print "Timedout:  \n".join("\n   ",@timedout)."\n";
}

